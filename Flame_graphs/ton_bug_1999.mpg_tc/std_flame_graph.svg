<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="582.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="565" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="565" > </text>
<g id="frames">
<g >
<title>x264_slicetype_decide (1 samples, 0.38%)</title><rect x="869.4" y="501" width="4.4" height="15.0" fill="rgb(240,27,4)" rx="2" ry="2" />
<text  x="872.40" y="511.5" ></text>
</g>
<g >
<title>dequeue_task (2 samples, 0.75%)</title><rect x="303.9" y="325" width="8.9" height="15.0" fill="rgb(239,179,46)" rx="2" ry="2" />
<text  x="306.89" y="335.5" ></text>
</g>
<g >
<title>remote_function (8 samples, 3.02%)</title><rect x="909.5" y="325" width="35.6" height="15.0" fill="rgb(237,104,54)" rx="2" ry="2" />
<text  x="912.47" y="335.5" >rem..</text>
</g>
<g >
<title>intel_idle (35 samples, 13.21%)</title><rect x="945.1" y="389" width="155.8" height="15.0" fill="rgb(249,32,34)" rx="2" ry="2" />
<text  x="948.09" y="399.5" >intel_idle</text>
</g>
<g >
<title>update_cfs_rq_h_load (1 samples, 0.38%)</title><rect x="486.5" y="357" width="4.4" height="15.0" fill="rgb(228,38,8)" rx="2" ry="2" />
<text  x="489.45" y="367.5" ></text>
</g>
<g >
<title>native_write_msr (4 samples, 1.51%)</title><rect x="887.2" y="37" width="17.8" height="15.0" fill="rgb(223,94,47)" rx="2" ry="2" />
<text  x="890.21" y="47.5" ></text>
</g>
<g >
<title>ctx_resched (8 samples, 3.02%)</title><rect x="909.5" y="277" width="35.6" height="15.0" fill="rgb(209,176,53)" rx="2" ry="2" />
<text  x="912.47" y="287.5" >ctx..</text>
</g>
<g >
<title>update_cfs_group (1 samples, 0.38%)</title><rect x="303.9" y="293" width="4.4" height="15.0" fill="rgb(249,185,40)" rx="2" ry="2" />
<text  x="306.89" y="303.5" ></text>
</g>
<g >
<title>cpu_startup_entry (43 samples, 16.23%)</title><rect x="909.5" y="469" width="191.4" height="15.0" fill="rgb(233,134,47)" rx="2" ry="2" />
<text  x="912.47" y="479.5" >cpu_startup_entry</text>
</g>
<g >
<title>__x64_sys_futex (1 samples, 0.38%)</title><rect x="486.5" y="453" width="4.4" height="15.0" fill="rgb(212,95,41)" rx="2" ry="2" />
<text  x="489.45" y="463.5" ></text>
</g>
<g >
<title>call_function_single_interrupt (4 samples, 1.51%)</title><rect x="1100.9" y="325" width="17.9" height="15.0" fill="rgb(231,167,53)" rx="2" ry="2" />
<text  x="1103.94" y="335.5" ></text>
</g>
<g >
<title>do_idle (43 samples, 16.23%)</title><rect x="909.5" y="453" width="191.4" height="15.0" fill="rgb(246,220,16)" rx="2" ry="2" />
<text  x="912.47" y="463.5" >do_idle</text>
</g>
<g >
<title>[unknown] (2 samples, 0.75%)</title><rect x="268.3" y="485" width="8.9" height="15.0" fill="rgb(224,139,10)" rx="2" ry="2" />
<text  x="271.26" y="495.5" ></text>
</g>
<g >
<title>ksys_ioctl (5 samples, 1.89%)</title><rect x="882.8" y="293" width="22.2" height="15.0" fill="rgb(237,210,3)" rx="2" ry="2" />
<text  x="885.75" y="303.5" >k..</text>
</g>
<g >
<title>pick_next_task_fair (1 samples, 0.38%)</title><rect x="312.8" y="341" width="4.4" height="15.0" fill="rgb(242,179,49)" rx="2" ry="2" />
<text  x="315.79" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (5 samples, 1.89%)</title><rect x="882.8" y="309" width="22.2" height="15.0" fill="rgb(237,124,34)" rx="2" ry="2" />
<text  x="885.75" y="319.5" >_..</text>
</g>
<g >
<title>__x64_sys_futex (4 samples, 1.51%)</title><rect x="299.4" y="437" width="17.8" height="15.0" fill="rgb(243,214,51)" rx="2" ry="2" />
<text  x="302.43" y="447.5" ></text>
</g>
<g >
<title>__do_execve_file.isra.39 (1 samples, 0.38%)</title><rect x="905.0" y="437" width="4.5" height="15.0" fill="rgb(252,228,17)" rx="2" ry="2" />
<text  x="908.02" y="447.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.38%)</title><rect x="905.0" y="341" width="4.5" height="15.0" fill="rgb(250,152,22)" rx="2" ry="2" />
<text  x="908.02" y="351.5" ></text>
</g>
<g >
<title>__schedule (4 samples, 1.51%)</title><rect x="299.4" y="357" width="17.8" height="15.0" fill="rgb(238,211,21)" rx="2" ry="2" />
<text  x="302.43" y="367.5" ></text>
</g>
<g >
<title>flush_old_exec (1 samples, 0.38%)</title><rect x="905.0" y="389" width="4.5" height="15.0" fill="rgb(245,213,13)" rx="2" ry="2" />
<text  x="908.02" y="399.5" ></text>
</g>
<g >
<title>cpuidle_enter (20 samples, 7.55%)</title><rect x="1100.9" y="357" width="89.1" height="15.0" fill="rgb(231,173,22)" rx="2" ry="2" />
<text  x="1103.94" y="367.5" >cpuidle_en..</text>
</g>
<g >
<title>smp_call_function_single_interrupt (4 samples, 1.51%)</title><rect x="1100.9" y="309" width="17.9" height="15.0" fill="rgb(234,68,41)" rx="2" ry="2" />
<text  x="1103.94" y="319.5" ></text>
</g>
<g >
<title>arch_call_rest_init (20 samples, 7.55%)</title><rect x="1100.9" y="437" width="89.1" height="15.0" fill="rgb(209,84,44)" rx="2" ry="2" />
<text  x="1103.94" y="447.5" >arch_call_..</text>
</g>
<g >
<title>_perf_ioctl (5 samples, 1.89%)</title><rect x="882.8" y="245" width="22.2" height="15.0" fill="rgb(222,186,19)" rx="2" ry="2" />
<text  x="885.75" y="255.5" >_..</text>
</g>
<g >
<title>x264_macroblock_cache_load_progressive (1 samples, 0.38%)</title><rect x="789.2" y="501" width="4.5" height="15.0" fill="rgb(249,172,27)" rx="2" ry="2" />
<text  x="792.25" y="511.5" ></text>
</g>
<g >
<title>x264_add8x8_idct_avx2.skip_prologue (54 samples, 20.38%)</title><rect x="548.8" y="501" width="240.4" height="15.0" fill="rgb(233,28,23)" rx="2" ry="2" />
<text  x="551.79" y="511.5" >x264_add8x8_idct_avx2.skip_prol..</text>
</g>
<g >
<title>exit_mmap (1 samples, 0.38%)</title><rect x="905.0" y="357" width="4.5" height="15.0" fill="rgb(223,210,15)" rx="2" ry="2" />
<text  x="908.02" y="367.5" ></text>
</g>
<g >
<title>do_vfs_ioctl (5 samples, 1.89%)</title><rect x="882.8" y="277" width="22.2" height="15.0" fill="rgb(242,195,28)" rx="2" ry="2" />
<text  x="885.75" y="287.5" >d..</text>
</g>
<g >
<title>x264_mb_predict_mv_ref16x16 (2 samples, 0.75%)</title><rect x="459.7" y="485" width="8.9" height="15.0" fill="rgb(235,209,0)" rx="2" ry="2" />
<text  x="462.74" y="495.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.38%)</title><rect x="312.8" y="325" width="4.4" height="15.0" fill="rgb(240,186,11)" rx="2" ry="2" />
<text  x="315.79" y="335.5" ></text>
</g>
<g >
<title>x264_quant_8x8_trellis (1 samples, 0.38%)</title><rect x="860.5" y="501" width="4.4" height="15.0" fill="rgb(209,35,20)" rx="2" ry="2" />
<text  x="863.49" y="511.5" ></text>
</g>
<g >
<title>x264_add8x8_idct_avx.skip_prologue (10 samples, 3.77%)</title><rect x="317.2" y="485" width="44.6" height="15.0" fill="rgb(205,205,3)" rx="2" ry="2" />
<text  x="320.25" y="495.5" >x264..</text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (8 samples, 3.02%)</title><rect x="909.5" y="245" width="35.6" height="15.0" fill="rgb(220,47,52)" rx="2" ry="2" />
<text  x="912.47" y="255.5" >int..</text>
</g>
<g >
<title>mmput (1 samples, 0.38%)</title><rect x="905.0" y="373" width="4.5" height="15.0" fill="rgb(253,228,11)" rx="2" ry="2" />
<text  x="908.02" y="383.5" ></text>
</g>
<g >
<title>cmd_record (5 samples, 1.89%)</title><rect x="882.8" y="421" width="22.2" height="15.0" fill="rgb(214,92,1)" rx="2" ry="2" />
<text  x="885.75" y="431.5" >c..</text>
</g>
<g >
<title>cpuidle_enter_state (43 samples, 16.23%)</title><rect x="909.5" y="405" width="191.4" height="15.0" fill="rgb(217,82,50)" rx="2" ry="2" />
<text  x="912.47" y="415.5" >cpuidle_enter_state</text>
</g>
<g >
<title>schedule (4 samples, 1.51%)</title><rect x="299.4" y="373" width="17.8" height="15.0" fill="rgb(225,89,32)" rx="2" ry="2" />
<text  x="302.43" y="383.5" ></text>
</g>
<g >
<title>[libx264.so.152] (1 samples, 0.38%)</title><rect x="268.3" y="469" width="4.4" height="15.0" fill="rgb(210,160,37)" rx="2" ry="2" />
<text  x="271.26" y="479.5" ></text>
</g>
<g >
<title>x264_mb_mc (1 samples, 0.38%)</title><rect x="455.3" y="485" width="4.4" height="15.0" fill="rgb(216,43,50)" rx="2" ry="2" />
<text  x="458.28" y="495.5" ></text>
</g>
<g >
<title>__libc_start_main (5 samples, 1.89%)</title><rect x="882.8" y="485" width="22.2" height="15.0" fill="rgb(217,141,18)" rx="2" ry="2" />
<text  x="885.75" y="495.5" >_..</text>
</g>
<g >
<title>wake_up_q (1 samples, 0.38%)</title><rect x="486.5" y="405" width="4.4" height="15.0" fill="rgb(226,50,49)" rx="2" ry="2" />
<text  x="489.45" y="415.5" ></text>
</g>
<g >
<title>start_kernel (20 samples, 7.55%)</title><rect x="1100.9" y="453" width="89.1" height="15.0" fill="rgb(249,100,37)" rx="2" ry="2" />
<text  x="1103.94" y="463.5" >start_kernel</text>
</g>
<g >
<title>x264_mb_predict_mv_direct16x16 (1 samples, 0.38%)</title><rect x="820.4" y="501" width="4.5" height="15.0" fill="rgb(251,34,20)" rx="2" ry="2" />
<text  x="823.42" y="511.5" ></text>
</g>
<g >
<title>x264_me_search_ref (8 samples, 3.02%)</title><rect x="824.9" y="501" width="35.6" height="15.0" fill="rgb(215,134,42)" rx="2" ry="2" />
<text  x="827.87" y="511.5" >x26..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.38%)</title><rect x="486.5" y="469" width="4.4" height="15.0" fill="rgb(254,214,25)" rx="2" ry="2" />
<text  x="489.45" y="479.5" ></text>
</g>
<g >
<title>smp_call_function_single (5 samples, 1.89%)</title><rect x="882.8" y="181" width="22.2" height="15.0" fill="rgb(208,138,12)" rx="2" ry="2" />
<text  x="885.75" y="191.5" >s..</text>
</g>
<g >
<title>migrate_task_rq_fair (1 samples, 0.38%)</title><rect x="312.8" y="277" width="4.4" height="15.0" fill="rgb(221,51,40)" rx="2" ry="2" />
<text  x="315.79" y="287.5" ></text>
</g>
<g >
<title>perf (6 samples, 2.26%)</title><rect x="882.8" y="517" width="26.7" height="15.0" fill="rgb(252,146,34)" rx="2" ry="2" />
<text  x="885.75" y="527.5" >p..</text>
</g>
<g >
<title>_perf_event_enable (5 samples, 1.89%)</title><rect x="882.8" y="213" width="22.2" height="15.0" fill="rgb(234,121,51)" rx="2" ry="2" />
<text  x="885.75" y="223.5" >_..</text>
</g>
<g >
<title>__perf_event_enable (8 samples, 3.02%)</title><rect x="909.5" y="293" width="35.6" height="15.0" fill="rgb(236,212,31)" rx="2" ry="2" />
<text  x="912.47" y="303.5" >__p..</text>
</g>
<g >
<title>x264_macroblock_analyse (2 samples, 0.75%)</title><rect x="433.0" y="485" width="8.9" height="15.0" fill="rgb(240,9,44)" rx="2" ry="2" />
<text  x="436.02" y="495.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.38%)</title><rect x="905.0" y="325" width="4.5" height="15.0" fill="rgb(205,208,26)" rx="2" ry="2" />
<text  x="908.02" y="335.5" ></text>
</g>
<g >
<title>event_function_call (5 samples, 1.89%)</title><rect x="882.8" y="197" width="22.2" height="15.0" fill="rgb(241,59,2)" rx="2" ry="2" />
<text  x="885.75" y="207.5" >e..</text>
</g>
<g >
<title>do_futex (4 samples, 1.51%)</title><rect x="299.4" y="421" width="17.8" height="15.0" fill="rgb(212,117,48)" rx="2" ry="2" />
<text  x="302.43" y="431.5" ></text>
</g>
<g >
<title>__perf_event_enable (4 samples, 1.51%)</title><rect x="1100.9" y="229" width="17.9" height="15.0" fill="rgb(240,90,19)" rx="2" ry="2" />
<text  x="1103.94" y="239.5" ></text>
</g>
<g >
<title>x264_trellis_coef0_0 (1 samples, 0.38%)</title><rect x="873.8" y="501" width="4.5" height="15.0" fill="rgb(220,130,27)" rx="2" ry="2" />
<text  x="876.85" y="511.5" ></text>
</g>
<g >
<title>psi_task_change (1 samples, 0.38%)</title><rect x="308.3" y="309" width="4.5" height="15.0" fill="rgb(214,132,50)" rx="2" ry="2" />
<text  x="311.34" y="319.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 1.51%)</title><rect x="887.2" y="85" width="17.8" height="15.0" fill="rgb(241,52,32)" rx="2" ry="2" />
<text  x="890.21" y="95.5" ></text>
</g>
<g >
<title>x264_mb_encode_chroma (3 samples, 1.13%)</title><rect x="798.2" y="501" width="13.3" height="15.0" fill="rgb(210,101,6)" rx="2" ry="2" />
<text  x="801.15" y="511.5" ></text>
</g>
<g >
<title>load_balance (1 samples, 0.38%)</title><rect x="312.8" y="309" width="4.4" height="15.0" fill="rgb(254,218,32)" rx="2" ry="2" />
<text  x="315.79" y="319.5" ></text>
</g>
<g >
<title>gnome-terminal- (1 samples, 0.38%)</title><rect x="878.3" y="517" width="4.5" height="15.0" fill="rgb(219,125,4)" rx="2" ry="2" />
<text  x="881.30" y="527.5" ></text>
</g>
<g >
<title>ctx_resched (4 samples, 1.51%)</title><rect x="887.2" y="101" width="17.8" height="15.0" fill="rgb(233,22,40)" rx="2" ry="2" />
<text  x="890.21" y="111.5" ></text>
</g>
<g >
<title>futex_wake (1 samples, 0.38%)</title><rect x="486.5" y="421" width="4.4" height="15.0" fill="rgb(223,227,43)" rx="2" ry="2" />
<text  x="489.45" y="431.5" ></text>
</g>
<g >
<title>x264_add8x8_idct8_avx.skip_prologue (1 samples, 0.38%)</title><rect x="495.4" y="501" width="4.4" height="15.0" fill="rgb(214,114,8)" rx="2" ry="2" />
<text  x="498.36" y="511.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (8 samples, 3.02%)</title><rect x="909.5" y="229" width="35.6" height="15.0" fill="rgb(209,94,19)" rx="2" ry="2" />
<text  x="912.47" y="239.5" >__i..</text>
</g>
<g >
<title>swapper (63 samples, 23.77%)</title><rect x="909.5" y="517" width="280.5" height="15.0" fill="rgb(248,0,24)" rx="2" ry="2" />
<text  x="912.47" y="527.5" >swapper</text>
</g>
<g >
<title>x86_pmu_enable (8 samples, 3.02%)</title><rect x="909.5" y="261" width="35.6" height="15.0" fill="rgb(237,165,28)" rx="2" ry="2" />
<text  x="912.47" y="271.5" >x86..</text>
</g>
<g >
<title>do_futex (1 samples, 0.38%)</title><rect x="486.5" y="437" width="4.4" height="15.0" fill="rgb(205,62,52)" rx="2" ry="2" />
<text  x="489.45" y="447.5" ></text>
</g>
<g >
<title>detach_entity_cfs_rq (1 samples, 0.38%)</title><rect x="312.8" y="261" width="4.4" height="15.0" fill="rgb(205,112,38)" rx="2" ry="2" />
<text  x="315.79" y="271.5" ></text>
</g>
<g >
<title>native_write_msr (4 samples, 1.51%)</title><rect x="1100.9" y="149" width="17.9" height="15.0" fill="rgb(211,26,19)" rx="2" ry="2" />
<text  x="1103.94" y="159.5" ></text>
</g>
<g >
<title>x264_macroblock_encode (1 samples, 0.38%)</title><rect x="793.7" y="501" width="4.5" height="15.0" fill="rgb(229,139,5)" rx="2" ry="2" />
<text  x="796.70" y="511.5" ></text>
</g>
<g >
<title>deactivate_task (2 samples, 0.75%)</title><rect x="303.9" y="341" width="8.9" height="15.0" fill="rgb(230,166,37)" rx="2" ry="2" />
<text  x="306.89" y="351.5" ></text>
</g>
<g >
<title>propagate_entity_cfs_rq.isra.98 (1 samples, 0.38%)</title><rect x="312.8" y="245" width="4.4" height="15.0" fill="rgb(229,41,50)" rx="2" ry="2" />
<text  x="315.79" y="255.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 1.51%)</title><rect x="1100.9" y="197" width="17.9" height="15.0" fill="rgb(243,105,29)" rx="2" ry="2" />
<text  x="1103.94" y="207.5" ></text>
</g>
<g >
<title>remote_function (4 samples, 1.51%)</title><rect x="887.2" y="149" width="17.8" height="15.0" fill="rgb(227,143,23)" rx="2" ry="2" />
<text  x="890.21" y="159.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2 (1 samples, 0.38%)</title><rect x="490.9" y="501" width="4.5" height="15.0" fill="rgb(241,147,39)" rx="2" ry="2" />
<text  x="493.91" y="511.5" ></text>
</g>
<g >
<title>start_secondary (43 samples, 16.23%)</title><rect x="909.5" y="485" width="191.4" height="15.0" fill="rgb(232,74,3)" rx="2" ry="2" />
<text  x="912.47" y="495.5" >start_secondary</text>
</g>
<g >
<title>pthread_cond_wait@@GLIBC_2.3.2 (5 samples, 1.89%)</title><rect x="295.0" y="485" width="22.2" height="15.0" fill="rgb(215,87,25)" rx="2" ry="2" />
<text  x="297.98" y="495.5" >p..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 1.51%)</title><rect x="299.4" y="469" width="17.8" height="15.0" fill="rgb(213,215,23)" rx="2" ry="2" />
<text  x="302.43" y="479.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (20 samples, 7.55%)</title><rect x="1100.9" y="341" width="89.1" height="15.0" fill="rgb(206,82,2)" rx="2" ry="2" />
<text  x="1103.94" y="351.5" >cpuidle_en..</text>
</g>
<g >
<title>select_task_rq_fair (1 samples, 0.38%)</title><rect x="486.5" y="373" width="4.4" height="15.0" fill="rgb(247,32,20)" rx="2" ry="2" />
<text  x="489.45" y="383.5" ></text>
</g>
<g >
<title>event_function (4 samples, 1.51%)</title><rect x="887.2" y="133" width="17.8" height="15.0" fill="rgb(234,198,13)" rx="2" ry="2" />
<text  x="890.21" y="143.5" ></text>
</g>
<g >
<title>do_idle (20 samples, 7.55%)</title><rect x="1100.9" y="389" width="89.1" height="15.0" fill="rgb(245,7,45)" rx="2" ry="2" />
<text  x="1103.94" y="399.5" >do_idle</text>
</g>
<g >
<title>main (5 samples, 1.89%)</title><rect x="882.8" y="469" width="22.2" height="15.0" fill="rgb(249,106,51)" rx="2" ry="2" />
<text  x="885.75" y="479.5" >m..</text>
</g>
<g >
<title>perf_event_for_each_child (5 samples, 1.89%)</title><rect x="882.8" y="229" width="22.2" height="15.0" fill="rgb(227,8,29)" rx="2" ry="2" />
<text  x="885.75" y="239.5" >p..</text>
</g>
<g >
<title>generic_smp_call_function_single_interrupt (4 samples, 1.51%)</title><rect x="1100.9" y="293" width="17.9" height="15.0" fill="rgb(210,7,47)" rx="2" ry="2" />
<text  x="1103.94" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 1.51%)</title><rect x="299.4" y="453" width="17.8" height="15.0" fill="rgb(245,154,0)" rx="2" ry="2" />
<text  x="302.43" y="463.5" ></text>
</g>
<g >
<title>generic_smp_call_function_single_interrupt (8 samples, 3.02%)</title><rect x="909.5" y="357" width="35.6" height="15.0" fill="rgb(251,15,38)" rx="2" ry="2" />
<text  x="912.47" y="367.5" >gen..</text>
</g>
<g >
<title>[libx264.so.152] (17 samples, 6.42%)</title><rect x="192.6" y="485" width="75.7" height="15.0" fill="rgb(223,181,49)" rx="2" ry="2" />
<text  x="195.57" y="495.5" >[libx264..</text>
</g>
<g >
<title>cpuidle_enter (43 samples, 16.23%)</title><rect x="909.5" y="421" width="191.4" height="15.0" fill="rgb(226,123,29)" rx="2" ry="2" />
<text  x="912.47" y="431.5" >cpuidle_enter</text>
</g>
<g >
<title>run_builtin (5 samples, 1.89%)</title><rect x="882.8" y="437" width="22.2" height="15.0" fill="rgb(252,67,21)" rx="2" ry="2" />
<text  x="885.75" y="447.5" >r..</text>
</g>
<g >
<title>ffmpeg (195 samples, 73.58%)</title><rect x="10.0" y="517" width="868.3" height="15.0" fill="rgb(207,87,28)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >ffmpeg</text>
</g>
<g >
<title>x264_macroblock_encode (3 samples, 1.13%)</title><rect x="441.9" y="485" width="13.4" height="15.0" fill="rgb(239,29,25)" rx="2" ry="2" />
<text  x="444.92" y="495.5" ></text>
</g>
<g >
<title>evsel__enable (5 samples, 1.89%)</title><rect x="882.8" y="389" width="22.2" height="15.0" fill="rgb(218,94,48)" rx="2" ry="2" />
<text  x="885.75" y="399.5" >e..</text>
</g>
<g >
<title>[unknown] (5 samples, 1.89%)</title><rect x="882.8" y="501" width="22.2" height="15.0" fill="rgb(251,112,49)" rx="2" ry="2" />
<text  x="885.75" y="511.5" >[..</text>
</g>
<g >
<title>x264_add8x8_idct_avx.skip_prologue (11 samples, 4.15%)</title><rect x="499.8" y="501" width="49.0" height="15.0" fill="rgb(220,146,39)" rx="2" ry="2" />
<text  x="502.81" y="511.5" >x264..</text>
</g>
<g >
<title>perf_ioctl (5 samples, 1.89%)</title><rect x="882.8" y="261" width="22.2" height="15.0" fill="rgb(206,123,51)" rx="2" ry="2" />
<text  x="885.75" y="271.5" >p..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.75%)</title><rect x="277.2" y="485" width="8.9" height="15.0" fill="rgb(216,36,37)" rx="2" ry="2" />
<text  x="280.17" y="495.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (20 samples, 7.55%)</title><rect x="1100.9" y="485" width="89.1" height="15.0" fill="rgb(229,210,3)" rx="2" ry="2" />
<text  x="1103.94" y="495.5" >x86_64_sta..</text>
</g>
<g >
<title>flush_smp_call_function_queue (8 samples, 3.02%)</title><rect x="909.5" y="341" width="35.6" height="15.0" fill="rgb(232,69,30)" rx="2" ry="2" />
<text  x="912.47" y="351.5" >flu..</text>
</g>
<g >
<title>remote_function (4 samples, 1.51%)</title><rect x="1100.9" y="261" width="17.9" height="15.0" fill="rgb(229,112,11)" rx="2" ry="2" />
<text  x="1103.94" y="271.5" ></text>
</g>
<g >
<title>search_binary_handler (1 samples, 0.38%)</title><rect x="905.0" y="421" width="4.5" height="15.0" fill="rgb(214,14,32)" rx="2" ry="2" />
<text  x="908.02" y="431.5" ></text>
</g>
<g >
<title>event_function (8 samples, 3.02%)</title><rect x="909.5" y="309" width="35.6" height="15.0" fill="rgb(224,205,36)" rx="2" ry="2" />
<text  x="912.47" y="319.5" >eve..</text>
</g>
<g >
<title>x264_me_search_ref (2 samples, 0.75%)</title><rect x="468.6" y="485" width="8.9" height="15.0" fill="rgb(234,57,42)" rx="2" ry="2" />
<text  x="471.64" y="495.5" ></text>
</g>
<g >
<title>x264_slicetype_analyse (1 samples, 0.38%)</title><rect x="864.9" y="501" width="4.5" height="15.0" fill="rgb(211,16,38)" rx="2" ry="2" />
<text  x="867.94" y="511.5" ></text>
</g>
<g >
<title>[ffmpeg] (5 samples, 1.89%)</title><rect x="10.0" y="501" width="22.3" height="15.0" fill="rgb(249,224,44)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >[..</text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.38%)</title><rect x="905.0" y="309" width="4.5" height="15.0" fill="rgb(250,188,41)" rx="2" ry="2" />
<text  x="908.02" y="319.5" ></text>
</g>
<g >
<title>ctx_resched (4 samples, 1.51%)</title><rect x="1100.9" y="213" width="17.9" height="15.0" fill="rgb(254,196,32)" rx="2" ry="2" />
<text  x="1103.94" y="223.5" ></text>
</g>
<g >
<title>set_task_cpu (1 samples, 0.38%)</title><rect x="312.8" y="293" width="4.4" height="15.0" fill="rgb(214,25,40)" rx="2" ry="2" />
<text  x="315.79" y="303.5" ></text>
</g>
<g >
<title>call_function_single_interrupt (8 samples, 3.02%)</title><rect x="909.5" y="389" width="35.6" height="15.0" fill="rgb(221,213,53)" rx="2" ry="2" />
<text  x="912.47" y="399.5" >cal..</text>
</g>
<g >
<title>x264_ratecontrol_mb (1 samples, 0.38%)</title><rect x="477.5" y="485" width="4.5" height="15.0" fill="rgb(220,215,27)" rx="2" ry="2" />
<text  x="480.55" y="495.5" ></text>
</g>
<g >
<title>x264_trellis_coef1 (1 samples, 0.38%)</title><rect x="482.0" y="485" width="4.5" height="15.0" fill="rgb(212,34,33)" rx="2" ry="2" />
<text  x="485.00" y="495.5" ></text>
</g>
<g >
<title>pthread_cond_broadcast@@GLIBC_2.3.2 (1 samples, 0.38%)</title><rect x="486.5" y="501" width="4.4" height="15.0" fill="rgb(227,125,16)" rx="2" ry="2" />
<text  x="489.45" y="511.5" ></text>
</g>
<g >
<title>__perf_event_enable (4 samples, 1.51%)</title><rect x="887.2" y="117" width="17.8" height="15.0" fill="rgb(213,162,51)" rx="2" ry="2" />
<text  x="890.21" y="127.5" ></text>
</g>
<g >
<title>native_write_msr (8 samples, 3.02%)</title><rect x="909.5" y="213" width="35.6" height="15.0" fill="rgb(246,113,43)" rx="2" ry="2" />
<text  x="912.47" y="223.5" >nat..</text>
</g>
<g >
<title>x264_add8x8_idct_avx2.skip_prologue (16 samples, 6.04%)</title><rect x="361.8" y="485" width="71.2" height="15.0" fill="rgb(229,214,33)" rx="2" ry="2" />
<text  x="364.77" y="495.5" >x264_add..</text>
</g>
<g >
<title>evlist__enable (5 samples, 1.89%)</title><rect x="882.8" y="405" width="22.2" height="15.0" fill="rgb(224,183,2)" rx="2" ry="2" />
<text  x="885.75" y="415.5" >e..</text>
</g>
<g >
<title>x264_mb_predict_mv (1 samples, 0.38%)</title><rect x="816.0" y="501" width="4.4" height="15.0" fill="rgb(220,180,8)" rx="2" ry="2" />
<text  x="818.96" y="511.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (4 samples, 1.51%)</title><rect x="887.2" y="53" width="17.8" height="15.0" fill="rgb(254,70,26)" rx="2" ry="2" />
<text  x="890.21" y="63.5" ></text>
</g>
<g >
<title>all (265 samples, 100%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(220,6,24)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 1.89%)</title><rect x="882.8" y="341" width="22.2" height="15.0" fill="rgb(207,178,26)" rx="2" ry="2" />
<text  x="885.75" y="351.5" >e..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.38%)</title><rect x="486.5" y="485" width="4.4" height="15.0" fill="rgb(253,135,21)" rx="2" ry="2" />
<text  x="489.45" y="495.5" ></text>
</g>
<g >
<title>[ffmpeg] (2 samples, 0.75%)</title><rect x="183.7" y="485" width="8.9" height="15.0" fill="rgb(213,137,27)" rx="2" ry="2" />
<text  x="186.66" y="495.5" ></text>
</g>
<g >
<title>call_cpuidle (43 samples, 16.23%)</title><rect x="909.5" y="437" width="191.4" height="15.0" fill="rgb(228,95,41)" rx="2" ry="2" />
<text  x="912.47" y="447.5" >call_cpuidle</text>
</g>
<g >
<title>futex_wait_queue_me (4 samples, 1.51%)</title><rect x="299.4" y="389" width="17.8" height="15.0" fill="rgb(224,102,53)" rx="2" ry="2" />
<text  x="302.43" y="399.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (4 samples, 1.51%)</title><rect x="887.2" y="69" width="17.8" height="15.0" fill="rgb(208,164,4)" rx="2" ry="2" />
<text  x="890.21" y="79.5" ></text>
</g>
<g >
<title>x264_mb_mc (1 samples, 0.38%)</title><rect x="811.5" y="501" width="4.5" height="15.0" fill="rgb(217,45,46)" rx="2" ry="2" />
<text  x="814.51" y="511.5" ></text>
</g>
<g >
<title>[unknown] (68 samples, 25.66%)</title><rect x="183.7" y="501" width="302.8" height="15.0" fill="rgb(234,170,6)" rx="2" ry="2" />
<text  x="186.66" y="511.5" >[unknown]</text>
</g>
<g >
<title>__strcmp_sse2_unaligned (1 samples, 0.38%)</title><rect x="286.1" y="485" width="4.4" height="15.0" fill="rgb(240,162,35)" rx="2" ry="2" />
<text  x="289.08" y="495.5" ></text>
</g>
<g >
<title>[libx264.so.152] (34 samples, 12.83%)</title><rect x="32.3" y="501" width="151.4" height="15.0" fill="rgb(233,47,6)" rx="2" ry="2" />
<text  x="35.26" y="511.5" >[libx264.so.152]</text>
</g>
<g >
<title>load_elf_binary (1 samples, 0.38%)</title><rect x="905.0" y="405" width="4.5" height="15.0" fill="rgb(228,77,23)" rx="2" ry="2" />
<text  x="908.02" y="415.5" ></text>
</g>
<g >
<title>handle_internal_command (5 samples, 1.89%)</title><rect x="882.8" y="453" width="22.2" height="15.0" fill="rgb(246,225,14)" rx="2" ry="2" />
<text  x="885.75" y="463.5" >h..</text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.38%)</title><rect x="486.5" y="389" width="4.4" height="15.0" fill="rgb(221,0,45)" rx="2" ry="2" />
<text  x="489.45" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.38%)</title><rect x="905.0" y="469" width="4.5" height="15.0" fill="rgb(239,31,35)" rx="2" ry="2" />
<text  x="908.02" y="479.5" ></text>
</g>
<g >
<title>secondary_startup_64 (63 samples, 23.77%)</title><rect x="909.5" y="501" width="280.5" height="15.0" fill="rgb(243,141,29)" rx="2" ry="2" />
<text  x="912.47" y="511.5" >secondary_startup_64</text>
</g>
<g >
<title>__GI___execve (1 samples, 0.38%)</title><rect x="905.0" y="501" width="4.5" height="15.0" fill="rgb(220,210,37)" rx="2" ry="2" />
<text  x="908.02" y="511.5" ></text>
</g>
<g >
<title>flush_smp_call_function_queue (4 samples, 1.51%)</title><rect x="1100.9" y="277" width="17.9" height="15.0" fill="rgb(243,138,7)" rx="2" ry="2" />
<text  x="1103.94" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 1.89%)</title><rect x="882.8" y="325" width="22.2" height="15.0" fill="rgb(227,50,35)" rx="2" ry="2" />
<text  x="885.75" y="335.5" >d..</text>
</g>
<g >
<title>x264_add8x8_idct_avx2.skip_prologue (1 samples, 0.38%)</title><rect x="272.7" y="469" width="4.5" height="15.0" fill="rgb(231,201,53)" rx="2" ry="2" />
<text  x="275.72" y="479.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (4 samples, 1.51%)</title><rect x="1100.9" y="181" width="17.9" height="15.0" fill="rgb(238,186,44)" rx="2" ry="2" />
<text  x="1103.94" y="191.5" ></text>
</g>
<g >
<title>intel_idle (16 samples, 6.04%)</title><rect x="1118.8" y="325" width="71.2" height="15.0" fill="rgb(225,201,30)" rx="2" ry="2" />
<text  x="1121.75" y="335.5" >intel_idle</text>
</g>
<g >
<title>x86_64_start_reservations (20 samples, 7.55%)</title><rect x="1100.9" y="469" width="89.1" height="15.0" fill="rgb(218,134,24)" rx="2" ry="2" />
<text  x="1103.94" y="479.5" >x86_64_sta..</text>
</g>
<g >
<title>cpu_startup_entry (20 samples, 7.55%)</title><rect x="1100.9" y="405" width="89.1" height="15.0" fill="rgb(229,48,24)" rx="2" ry="2" />
<text  x="1103.94" y="415.5" >cpu_startu..</text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (4 samples, 1.51%)</title><rect x="1100.9" y="165" width="17.9" height="15.0" fill="rgb(228,209,8)" rx="2" ry="2" />
<text  x="1103.94" y="175.5" ></text>
</g>
<g >
<title>call_cpuidle (20 samples, 7.55%)</title><rect x="1100.9" y="373" width="89.1" height="15.0" fill="rgb(241,181,36)" rx="2" ry="2" />
<text  x="1103.94" y="383.5" >call_cpuidle</text>
</g>
<g >
<title>dequeue_task_fair (1 samples, 0.38%)</title><rect x="303.9" y="309" width="4.4" height="15.0" fill="rgb(241,81,45)" rx="2" ry="2" />
<text  x="306.89" y="319.5" ></text>
</g>
<g >
<title>_dbus_message_loader_queue_messages (1 samples, 0.38%)</title><rect x="878.3" y="501" width="4.5" height="15.0" fill="rgb(222,106,47)" rx="2" ry="2" />
<text  x="881.30" y="511.5" ></text>
</g>
<g >
<title>event_function (4 samples, 1.51%)</title><rect x="1100.9" y="245" width="17.9" height="15.0" fill="rgb(216,115,39)" rx="2" ry="2" />
<text  x="1103.94" y="255.5" ></text>
</g>
<g >
<title>futex_wait (4 samples, 1.51%)</title><rect x="299.4" y="405" width="17.8" height="15.0" fill="rgb(248,56,23)" rx="2" ry="2" />
<text  x="302.43" y="415.5" ></text>
</g>
<g >
<title>smp_call_function_single_interrupt (8 samples, 3.02%)</title><rect x="909.5" y="373" width="35.6" height="15.0" fill="rgb(217,54,41)" rx="2" ry="2" />
<text  x="912.47" y="383.5" >smp..</text>
</g>
<g >
<title>perf_evsel__enable (5 samples, 1.89%)</title><rect x="882.8" y="373" width="22.2" height="15.0" fill="rgb(228,190,22)" rx="2" ry="2" />
<text  x="885.75" y="383.5" >p..</text>
</g>
<g >
<title>__GI___ioctl (5 samples, 1.89%)</title><rect x="882.8" y="357" width="22.2" height="15.0" fill="rgb(220,195,19)" rx="2" ry="2" />
<text  x="885.75" y="367.5" >_..</text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.38%)</title><rect x="905.0" y="453" width="4.5" height="15.0" fill="rgb(222,35,4)" rx="2" ry="2" />
<text  x="908.02" y="463.5" ></text>
</g>
<g >
<title>rest_init (20 samples, 7.55%)</title><rect x="1100.9" y="421" width="89.1" height="15.0" fill="rgb(215,98,27)" rx="2" ry="2" />
<text  x="1103.94" y="431.5" >rest_init</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.38%)</title><rect x="905.0" y="485" width="4.5" height="15.0" fill="rgb(228,138,16)" rx="2" ry="2" />
<text  x="908.02" y="495.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.38%)</title><rect x="290.5" y="485" width="4.5" height="15.0" fill="rgb(223,127,38)" rx="2" ry="2" />
<text  x="293.53" y="495.5" ></text>
</g>
<g >
<title>generic_exec_single (4 samples, 1.51%)</title><rect x="887.2" y="165" width="17.8" height="15.0" fill="rgb(212,133,22)" rx="2" ry="2" />
<text  x="890.21" y="175.5" ></text>
</g>
</g>
</svg>
