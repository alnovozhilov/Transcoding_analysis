<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="582.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="565" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="565" > </text>
<g id="frames">
<g >
<title>[libfreetype.so.6.15.0] (1 samples, 0.83%)</title><rect x="826.2" y="469" width="9.8" height="15.0" fill="rgb(217,204,46)" rx="2" ry="2" />
<text  x="829.17" y="479.5" ></text>
</g>
<g >
<title>remote_function (8 samples, 6.67%)</title><rect x="1003.2" y="325" width="78.6" height="15.0" fill="rgb(205,92,12)" rx="2" ry="2" />
<text  x="1006.17" y="335.5" >remote_fu..</text>
</g>
<g >
<title>[unknown] (1 samples, 0.83%)</title><rect x="236.2" y="469" width="9.8" height="15.0" fill="rgb(226,96,1)" rx="2" ry="2" />
<text  x="239.17" y="479.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (4 samples, 3.33%)</title><rect x="954.0" y="69" width="39.3" height="15.0" fill="rgb(238,171,29)" rx="2" ry="2" />
<text  x="957.00" y="79.5" >int..</text>
</g>
<g >
<title>[ffmpeg] (1 samples, 0.83%)</title><rect x="226.3" y="469" width="9.9" height="15.0" fill="rgb(207,165,2)" rx="2" ry="2" />
<text  x="229.33" y="479.5" ></text>
</g>
<g >
<title>x264_frame_expand_border_filtered (1 samples, 0.83%)</title><rect x="364.0" y="485" width="9.8" height="15.0" fill="rgb(230,75,20)" rx="2" ry="2" />
<text  x="367.00" y="495.5" ></text>
</g>
<g >
<title>cmd_record (5 samples, 4.17%)</title><rect x="944.2" y="421" width="49.1" height="15.0" fill="rgb(219,15,40)" rx="2" ry="2" />
<text  x="947.17" y="431.5" >cmd_..</text>
</g>
<g >
<title>all (120 samples, 100%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(231,5,12)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>[i965_dri.so] (1 samples, 0.83%)</title><rect x="19.8" y="469" width="9.9" height="15.0" fill="rgb(221,216,12)" rx="2" ry="2" />
<text  x="22.83" y="479.5" ></text>
</g>
<g >
<title>__madvise (1 samples, 0.83%)</title><rect x="295.2" y="485" width="9.8" height="15.0" fill="rgb(233,19,37)" rx="2" ry="2" />
<text  x="298.17" y="495.5" ></text>
</g>
<g >
<title>__get_user_8 (1 samples, 0.83%)</title><rect x="993.3" y="325" width="9.9" height="15.0" fill="rgb(241,223,23)" rx="2" ry="2" />
<text  x="996.33" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 4.17%)</title><rect x="944.2" y="341" width="49.1" height="15.0" fill="rgb(249,113,48)" rx="2" ry="2" />
<text  x="947.17" y="351.5" >entr..</text>
</g>
<g >
<title>call_function_single_interrupt (4 samples, 3.33%)</title><rect x="836.0" y="485" width="39.3" height="15.0" fill="rgb(217,37,32)" rx="2" ry="2" />
<text  x="839.00" y="495.5" >cal..</text>
</g>
<g >
<title>x264_add8x8_idct_avx.skip_prologue (2 samples, 1.67%)</title><rect x="305.0" y="485" width="19.7" height="15.0" fill="rgb(248,195,5)" rx="2" ry="2" />
<text  x="308.00" y="495.5" ></text>
</g>
<g >
<title>__perf_event_enable (8 samples, 6.67%)</title><rect x="1003.2" y="293" width="78.6" height="15.0" fill="rgb(236,184,45)" rx="2" ry="2" />
<text  x="1006.17" y="303.5" >__perf_ev..</text>
</g>
<g >
<title>__do_execve_file.isra.39 (1 samples, 0.83%)</title><rect x="993.3" y="341" width="9.9" height="15.0" fill="rgb(253,113,13)" rx="2" ry="2" />
<text  x="996.33" y="351.5" ></text>
</g>
<g >
<title>x264_mb_encode_chroma (1 samples, 0.83%)</title><rect x="570.5" y="501" width="9.8" height="15.0" fill="rgb(233,129,21)" rx="2" ry="2" />
<text  x="573.50" y="511.5" ></text>
</g>
<g >
<title>generic_smp_call_function_single_interrupt (8 samples, 6.67%)</title><rect x="1003.2" y="357" width="78.6" height="15.0" fill="rgb(247,219,32)" rx="2" ry="2" />
<text  x="1006.17" y="367.5" >generic_s..</text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (4 samples, 3.33%)</title><rect x="954.0" y="53" width="39.3" height="15.0" fill="rgb(252,67,49)" rx="2" ry="2" />
<text  x="957.00" y="63.5" >__i..</text>
</g>
<g >
<title>ctx_resched (4 samples, 3.33%)</title><rect x="954.0" y="101" width="39.3" height="15.0" fill="rgb(216,189,9)" rx="2" ry="2" />
<text  x="957.00" y="111.5" >ctx..</text>
</g>
<g >
<title>do_vfs_ioctl (5 samples, 4.17%)</title><rect x="944.2" y="277" width="49.1" height="15.0" fill="rgb(218,26,25)" rx="2" ry="2" />
<text  x="947.17" y="287.5" >do_v..</text>
</g>
<g >
<title>do_idle (18 samples, 15.00%)</title><rect x="1003.2" y="453" width="177.0" height="15.0" fill="rgb(227,209,43)" rx="2" ry="2" />
<text  x="1006.17" y="463.5" >do_idle</text>
</g>
<g >
<title>handle_internal_command (1 samples, 0.83%)</title><rect x="993.3" y="469" width="9.9" height="15.0" fill="rgb(233,217,42)" rx="2" ry="2" />
<text  x="996.33" y="479.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (1 samples, 0.83%)</title><rect x="1180.2" y="341" width="9.8" height="15.0" fill="rgb(208,137,30)" rx="2" ry="2" />
<text  x="1183.17" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.83%)</title><rect x="993.3" y="357" width="9.9" height="15.0" fill="rgb(243,28,6)" rx="2" ry="2" />
<text  x="996.33" y="367.5" ></text>
</g>
<g >
<title>generic_smp_call_function_single_interrupt (4 samples, 3.33%)</title><rect x="836.0" y="453" width="39.3" height="15.0" fill="rgb(229,82,49)" rx="2" ry="2" />
<text  x="839.00" y="463.5" >gen..</text>
</g>
<g >
<title>Xorg (3 samples, 2.50%)</title><rect x="10.0" y="517" width="29.5" height="15.0" fill="rgb(224,221,5)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >Xorg</text>
</g>
<g >
<title>cpuidle_enter (18 samples, 15.00%)</title><rect x="1003.2" y="421" width="177.0" height="15.0" fill="rgb(212,119,24)" rx="2" ry="2" />
<text  x="1006.17" y="431.5" >cpuidle_enter</text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (4 samples, 3.33%)</title><rect x="836.0" y="325" width="39.3" height="15.0" fill="rgb(214,13,4)" rx="2" ry="2" />
<text  x="839.00" y="335.5" >__i..</text>
</g>
<g >
<title>[unknown] (1 samples, 0.83%)</title><rect x="19.8" y="485" width="9.9" height="15.0" fill="rgb(220,10,38)" rx="2" ry="2" />
<text  x="22.83" y="495.5" ></text>
</g>
<g >
<title>[libfreetype.so.6.15.0] (3 samples, 2.50%)</title><rect x="895.0" y="485" width="29.5" height="15.0" fill="rgb(235,96,23)" rx="2" ry="2" />
<text  x="898.00" y="495.5" >[l..</text>
</g>
<g >
<title>run_builtin (1 samples, 0.83%)</title><rect x="993.3" y="453" width="9.9" height="15.0" fill="rgb(239,29,28)" rx="2" ry="2" />
<text  x="996.33" y="463.5" ></text>
</g>
<g >
<title>ffmpeg (57 samples, 47.50%)</title><rect x="39.5" y="517" width="560.5" height="15.0" fill="rgb(240,16,37)" rx="2" ry="2" />
<text  x="42.50" y="527.5" >ffmpeg</text>
</g>
<g >
<title>__perf_event_enable (4 samples, 3.33%)</title><rect x="954.0" y="117" width="39.3" height="15.0" fill="rgb(247,32,9)" rx="2" ry="2" />
<text  x="957.00" y="127.5" >__p..</text>
</g>
<g >
<title>x264_add8x8_idct_avx2.skip_prologue (7 samples, 5.83%)</title><rect x="482.0" y="501" width="68.8" height="15.0" fill="rgb(240,50,52)" rx="2" ry="2" />
<text  x="485.00" y="511.5" >x264_ad..</text>
</g>
<g >
<title>handle_internal_command (5 samples, 4.17%)</title><rect x="944.2" y="453" width="49.1" height="15.0" fill="rgb(241,131,20)" rx="2" ry="2" />
<text  x="947.17" y="463.5" >hand..</text>
</g>
<g >
<title>perf (6 samples, 5.00%)</title><rect x="944.2" y="517" width="59.0" height="15.0" fill="rgb(221,54,41)" rx="2" ry="2" />
<text  x="947.17" y="527.5" >perf</text>
</g>
<g >
<title>__GI___ioctl (5 samples, 4.17%)</title><rect x="944.2" y="357" width="49.1" height="15.0" fill="rgb(210,40,3)" rx="2" ry="2" />
<text  x="947.17" y="367.5" >__GI..</text>
</g>
<g >
<title>cpu_startup_entry (18 samples, 15.00%)</title><rect x="1003.2" y="469" width="177.0" height="15.0" fill="rgb(215,138,47)" rx="2" ry="2" />
<text  x="1006.17" y="479.5" >cpu_startup_entry</text>
</g>
<g >
<title>[ffmpeg] (1 samples, 0.83%)</title><rect x="236.2" y="453" width="9.8" height="15.0" fill="rgb(249,145,49)" rx="2" ry="2" />
<text  x="239.17" y="463.5" ></text>
</g>
<g >
<title>intel_idle (10 samples, 8.33%)</title><rect x="1081.8" y="389" width="98.4" height="15.0" fill="rgb(213,124,27)" rx="2" ry="2" />
<text  x="1084.83" y="399.5" >intel_idle</text>
</g>
<g >
<title>__libc_start_main (5 samples, 4.17%)</title><rect x="944.2" y="485" width="49.1" height="15.0" fill="rgb(235,8,13)" rx="2" ry="2" />
<text  x="947.17" y="495.5" >__li..</text>
</g>
<g >
<title>x264_sub8x8_dct8_avx.skip_prologue (1 samples, 0.83%)</title><rect x="413.2" y="485" width="9.8" height="15.0" fill="rgb(226,23,43)" rx="2" ry="2" />
<text  x="416.17" y="495.5" ></text>
</g>
<g >
<title>flush_smp_call_function_queue (4 samples, 3.33%)</title><rect x="836.0" y="437" width="39.3" height="15.0" fill="rgb(215,78,5)" rx="2" ry="2" />
<text  x="839.00" y="447.5" >flu..</text>
</g>
<g >
<title>[libx264.so.152] (5 samples, 4.17%)</title><rect x="246.0" y="485" width="49.2" height="15.0" fill="rgb(211,87,46)" rx="2" ry="2" />
<text  x="249.00" y="495.5" >[lib..</text>
</g>
<g >
<title>entry_SYSCALL_64 (1 samples, 0.83%)</title><rect x="295.2" y="469" width="9.8" height="15.0" fill="rgb(218,167,51)" rx="2" ry="2" />
<text  x="298.17" y="479.5" ></text>
</g>
<g >
<title>x264_add8x8_idct_avx.skip_prologue (6 samples, 5.00%)</title><rect x="423.0" y="501" width="59.0" height="15.0" fill="rgb(213,140,33)" rx="2" ry="2" />
<text  x="426.00" y="511.5" >x264_a..</text>
</g>
<g >
<title>smp_call_function_single (5 samples, 4.17%)</title><rect x="944.2" y="181" width="49.1" height="15.0" fill="rgb(246,198,51)" rx="2" ry="2" />
<text  x="947.17" y="191.5" >smp_..</text>
</g>
<g >
<title>cpuidle_enter (1 samples, 0.83%)</title><rect x="1180.2" y="357" width="9.8" height="15.0" fill="rgb(226,155,30)" rx="2" ry="2" />
<text  x="1183.17" y="367.5" ></text>
</g>
<g >
<title>start_kernel (1 samples, 0.83%)</title><rect x="1180.2" y="453" width="9.8" height="15.0" fill="rgb(226,138,51)" rx="2" ry="2" />
<text  x="1183.17" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.83%)</title><rect x="993.3" y="373" width="9.9" height="15.0" fill="rgb(208,81,38)" rx="2" ry="2" />
<text  x="996.33" y="383.5" ></text>
</g>
<g >
<title>arch_call_rest_init (1 samples, 0.83%)</title><rect x="1180.2" y="437" width="9.8" height="15.0" fill="rgb(219,161,16)" rx="2" ry="2" />
<text  x="1183.17" y="447.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.83%)</title><rect x="934.3" y="501" width="9.9" height="15.0" fill="rgb(223,165,46)" rx="2" ry="2" />
<text  x="937.33" y="511.5" ></text>
</g>
<g >
<title>[libgtk-3.so.0.2200.30] (1 samples, 0.83%)</title><rect x="924.5" y="501" width="9.8" height="15.0" fill="rgb(206,54,24)" rx="2" ry="2" />
<text  x="927.50" y="511.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 3.33%)</title><rect x="954.0" y="85" width="39.3" height="15.0" fill="rgb(225,51,19)" rx="2" ry="2" />
<text  x="957.00" y="95.5" >x86..</text>
</g>
<g >
<title>cpuidle_enter_state (18 samples, 15.00%)</title><rect x="1003.2" y="405" width="177.0" height="15.0" fill="rgb(226,6,40)" rx="2" ry="2" />
<text  x="1006.17" y="415.5" >cpuidle_enter_state</text>
</g>
<g >
<title>flush_smp_call_function_queue (8 samples, 6.67%)</title><rect x="1003.2" y="341" width="78.6" height="15.0" fill="rgb(252,62,27)" rx="2" ry="2" />
<text  x="1006.17" y="351.5" >flush_smp..</text>
</g>
<g >
<title>do_syscall_64 (5 samples, 4.17%)</title><rect x="944.2" y="325" width="49.1" height="15.0" fill="rgb(216,98,44)" rx="2" ry="2" />
<text  x="947.17" y="335.5" >do_s..</text>
</g>
<g >
<title>perf_event_for_each_child (5 samples, 4.17%)</title><rect x="944.2" y="229" width="49.1" height="15.0" fill="rgb(236,66,11)" rx="2" ry="2" />
<text  x="947.17" y="239.5" >perf..</text>
</g>
<g >
<title>remote_function (4 samples, 3.33%)</title><rect x="836.0" y="421" width="39.3" height="15.0" fill="rgb(231,182,25)" rx="2" ry="2" />
<text  x="839.00" y="431.5" >rem..</text>
</g>
<g >
<title>rest_init (1 samples, 0.83%)</title><rect x="1180.2" y="421" width="9.8" height="15.0" fill="rgb(246,194,31)" rx="2" ry="2" />
<text  x="1183.17" y="431.5" ></text>
</g>
<g >
<title>do_idle (1 samples, 0.83%)</title><rect x="1180.2" y="389" width="9.8" height="15.0" fill="rgb(248,41,0)" rx="2" ry="2" />
<text  x="1183.17" y="399.5" ></text>
</g>
<g >
<title>x86_pmu_enable (8 samples, 6.67%)</title><rect x="1003.2" y="261" width="78.6" height="15.0" fill="rgb(213,28,23)" rx="2" ry="2" />
<text  x="1006.17" y="271.5" >x86_pmu_e..</text>
</g>
<g >
<title>smp_call_function_single_interrupt (4 samples, 3.33%)</title><rect x="836.0" y="469" width="39.3" height="15.0" fill="rgb(250,227,20)" rx="2" ry="2" />
<text  x="839.00" y="479.5" >smp..</text>
</g>
<g >
<title>cmd_record (1 samples, 0.83%)</title><rect x="993.3" y="437" width="9.9" height="15.0" fill="rgb(245,32,40)" rx="2" ry="2" />
<text  x="996.33" y="447.5" ></text>
</g>
<g >
<title>[ffmpeg] (6 samples, 5.00%)</title><rect x="39.5" y="501" width="59.0" height="15.0" fill="rgb(207,89,25)" rx="2" ry="2" />
<text  x="42.50" y="511.5" >[ffmpeg]</text>
</g>
<g >
<title>__x64_sys_ioctl (5 samples, 4.17%)</title><rect x="944.2" y="309" width="49.1" height="15.0" fill="rgb(228,57,27)" rx="2" ry="2" />
<text  x="947.17" y="319.5" >__x6..</text>
</g>
<g >
<title>x264_macroblock_cache_save (1 samples, 0.83%)</title><rect x="560.7" y="501" width="9.8" height="15.0" fill="rgb(220,212,0)" rx="2" ry="2" />
<text  x="563.67" y="511.5" ></text>
</g>
<g >
<title>__GI___execve (1 samples, 0.83%)</title><rect x="993.3" y="405" width="9.9" height="15.0" fill="rgb(230,63,1)" rx="2" ry="2" />
<text  x="996.33" y="415.5" ></text>
</g>
<g >
<title>x264_me_search_ref (1 samples, 0.83%)</title><rect x="590.2" y="501" width="9.8" height="15.0" fill="rgb(212,104,11)" rx="2" ry="2" />
<text  x="593.17" y="511.5" ></text>
</g>
<g >
<title>[ffmpeg] (6 samples, 5.00%)</title><rect x="187.0" y="485" width="59.0" height="15.0" fill="rgb(254,32,30)" rx="2" ry="2" />
<text  x="190.00" y="495.5" >[ffmpeg]</text>
</g>
<g >
<title>x264_macroblock_encode (1 samples, 0.83%)</title><rect x="383.7" y="485" width="9.8" height="15.0" fill="rgb(240,171,23)" rx="2" ry="2" />
<text  x="386.67" y="495.5" ></text>
</g>
<g >
<title>event_function_call (5 samples, 4.17%)</title><rect x="944.2" y="197" width="49.1" height="15.0" fill="rgb(242,165,53)" rx="2" ry="2" />
<text  x="947.17" y="207.5" >even..</text>
</g>
<g >
<title>smp_call_function_single_interrupt (8 samples, 6.67%)</title><rect x="1003.2" y="373" width="78.6" height="15.0" fill="rgb(210,123,49)" rx="2" ry="2" />
<text  x="1006.17" y="383.5" >smp_call_..</text>
</g>
<g >
<title>x264_me_search_ref (2 samples, 1.67%)</title><rect x="393.5" y="485" width="19.7" height="15.0" fill="rgb(252,33,36)" rx="2" ry="2" />
<text  x="396.50" y="495.5" ></text>
</g>
<g >
<title>x264_macroblock_analyse (1 samples, 0.83%)</title><rect x="550.8" y="501" width="9.9" height="15.0" fill="rgb(239,71,47)" rx="2" ry="2" />
<text  x="553.83" y="511.5" ></text>
</g>
<g >
<title>[libx264.so.152] (9 samples, 7.50%)</title><rect x="98.5" y="501" width="88.5" height="15.0" fill="rgb(247,134,26)" rx="2" ry="2" />
<text  x="101.50" y="511.5" >[libx264.s..</text>
</g>
<g >
<title>perf_ioctl (5 samples, 4.17%)</title><rect x="944.2" y="261" width="49.1" height="15.0" fill="rgb(221,169,18)" rx="2" ry="2" />
<text  x="947.17" y="271.5" >perf..</text>
</g>
<g >
<title>generic_exec_single (4 samples, 3.33%)</title><rect x="954.0" y="165" width="39.3" height="15.0" fill="rgb(227,33,51)" rx="2" ry="2" />
<text  x="957.00" y="175.5" >gen..</text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (8 samples, 6.67%)</title><rect x="1003.2" y="229" width="78.6" height="15.0" fill="rgb(232,142,43)" rx="2" ry="2" />
<text  x="1006.17" y="239.5" >__intel_p..</text>
</g>
<g >
<title>remote_function (4 samples, 3.33%)</title><rect x="954.0" y="149" width="39.3" height="15.0" fill="rgb(254,133,26)" rx="2" ry="2" />
<text  x="957.00" y="159.5" >rem..</text>
</g>
<g >
<title>evlist__enable (5 samples, 4.17%)</title><rect x="944.2" y="405" width="49.1" height="15.0" fill="rgb(225,103,17)" rx="2" ry="2" />
<text  x="947.17" y="415.5" >evli..</text>
</g>
<g >
<title>FT_DivFix (2 samples, 1.67%)</title><rect x="875.3" y="485" width="19.7" height="15.0" fill="rgb(251,194,12)" rx="2" ry="2" />
<text  x="878.33" y="495.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.83%)</title><rect x="934.3" y="485" width="9.9" height="15.0" fill="rgb(233,50,38)" rx="2" ry="2" />
<text  x="937.33" y="495.5" ></text>
</g>
<g >
<title>x264_mb_predict_mv (1 samples, 0.83%)</title><rect x="580.3" y="501" width="9.9" height="15.0" fill="rgb(250,167,37)" rx="2" ry="2" />
<text  x="583.33" y="511.5" ></text>
</g>
<g >
<title>native_write_msr (8 samples, 6.67%)</title><rect x="1003.2" y="213" width="78.6" height="15.0" fill="rgb(238,20,25)" rx="2" ry="2" />
<text  x="1006.17" y="223.5" >native_wr..</text>
</g>
<g >
<title>call_cpuidle (18 samples, 15.00%)</title><rect x="1003.2" y="437" width="177.0" height="15.0" fill="rgb(223,31,30)" rx="2" ry="2" />
<text  x="1006.17" y="447.5" >call_cpuidle</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.83%)</title><rect x="993.3" y="389" width="9.9" height="15.0" fill="rgb(212,122,33)" rx="2" ry="2" />
<text  x="996.33" y="399.5" ></text>
</g>
<g >
<title>ctx_resched (4 samples, 3.33%)</title><rect x="836.0" y="373" width="39.3" height="15.0" fill="rgb(236,1,16)" rx="2" ry="2" />
<text  x="839.00" y="383.5" >ctx..</text>
</g>
<g >
<title>gnome-terminal- (2 samples, 1.67%)</title><rect x="924.5" y="517" width="19.7" height="15.0" fill="rgb(220,183,16)" rx="2" ry="2" />
<text  x="927.50" y="527.5" ></text>
</g>
<g >
<title>call_function_single_interrupt (8 samples, 6.67%)</title><rect x="1003.2" y="389" width="78.6" height="15.0" fill="rgb(251,10,9)" rx="2" ry="2" />
<text  x="1006.17" y="399.5" >call_func..</text>
</g>
<g >
<title>event_function (4 samples, 3.33%)</title><rect x="836.0" y="405" width="39.3" height="15.0" fill="rgb(238,151,1)" rx="2" ry="2" />
<text  x="839.00" y="415.5" >eve..</text>
</g>
<g >
<title>x86_64_start_kernel (1 samples, 0.83%)</title><rect x="1180.2" y="485" width="9.8" height="15.0" fill="rgb(254,121,2)" rx="2" ry="2" />
<text  x="1183.17" y="495.5" ></text>
</g>
<g >
<title>x264_add8x8_idct_avx2.skip_prologue (4 samples, 3.33%)</title><rect x="324.7" y="485" width="39.3" height="15.0" fill="rgb(222,21,4)" rx="2" ry="2" />
<text  x="327.67" y="495.5" >x26..</text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 3.33%)</title><rect x="836.0" y="357" width="39.3" height="15.0" fill="rgb(205,12,54)" rx="2" ry="2" />
<text  x="839.00" y="367.5" >x86..</text>
</g>
<g >
<title>event_function (8 samples, 6.67%)</title><rect x="1003.2" y="309" width="78.6" height="15.0" fill="rgb(232,81,46)" rx="2" ry="2" />
<text  x="1006.17" y="319.5" >event_fun..</text>
</g>
<g >
<title>gdk-pixbuf-thum (33 samples, 27.50%)</title><rect x="600.0" y="517" width="324.5" height="15.0" fill="rgb(253,108,29)" rx="2" ry="2" />
<text  x="603.00" y="527.5" >gdk-pixbuf-thum</text>
</g>
<g >
<title>secondary_startup_64 (19 samples, 15.83%)</title><rect x="1003.2" y="501" width="186.8" height="15.0" fill="rgb(205,74,30)" rx="2" ry="2" />
<text  x="1006.17" y="511.5" >secondary_startup_64</text>
</g>
<g >
<title>cpu_startup_entry (1 samples, 0.83%)</title><rect x="1180.2" y="405" width="9.8" height="15.0" fill="rgb(253,99,4)" rx="2" ry="2" />
<text  x="1183.17" y="415.5" ></text>
</g>
<g >
<title>__libc_start_main (1 samples, 0.83%)</title><rect x="993.3" y="501" width="9.9" height="15.0" fill="rgb(226,107,30)" rx="2" ry="2" />
<text  x="996.33" y="511.5" ></text>
</g>
<g >
<title>ctx_resched (8 samples, 6.67%)</title><rect x="1003.2" y="277" width="78.6" height="15.0" fill="rgb(222,124,18)" rx="2" ry="2" />
<text  x="1006.17" y="287.5" >ctx_resched</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.83%)</title><rect x="934.3" y="453" width="9.9" height="15.0" fill="rgb(232,21,51)" rx="2" ry="2" />
<text  x="937.33" y="463.5" ></text>
</g>
<g >
<title>_perf_event_enable (5 samples, 4.17%)</title><rect x="944.2" y="213" width="49.1" height="15.0" fill="rgb(241,137,52)" rx="2" ry="2" />
<text  x="947.17" y="223.5" >_per..</text>
</g>
<g >
<title>[unknown] (24 samples, 20.00%)</title><rect x="187.0" y="501" width="236.0" height="15.0" fill="rgb(237,34,49)" rx="2" ry="2" />
<text  x="190.00" y="511.5" >[unknown]</text>
</g>
<g >
<title>perf_evsel__enable (5 samples, 4.17%)</title><rect x="944.2" y="373" width="49.1" height="15.0" fill="rgb(249,171,46)" rx="2" ry="2" />
<text  x="947.17" y="383.5" >perf..</text>
</g>
<g >
<title>evsel__enable (5 samples, 4.17%)</title><rect x="944.2" y="389" width="49.1" height="15.0" fill="rgb(235,146,19)" rx="2" ry="2" />
<text  x="947.17" y="399.5" >evse..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.83%)</title><rect x="934.3" y="469" width="9.9" height="15.0" fill="rgb(237,180,54)" rx="2" ry="2" />
<text  x="937.33" y="479.5" ></text>
</g>
<g >
<title>ksys_ioctl (5 samples, 4.17%)</title><rect x="944.2" y="293" width="49.1" height="15.0" fill="rgb(249,213,41)" rx="2" ry="2" />
<text  x="947.17" y="303.5" >ksys..</text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (8 samples, 6.67%)</title><rect x="1003.2" y="245" width="78.6" height="15.0" fill="rgb(241,93,26)" rx="2" ry="2" />
<text  x="1006.17" y="255.5" >intel_tfa..</text>
</g>
<g >
<title>[unknown] (1 samples, 0.83%)</title><rect x="826.2" y="485" width="9.8" height="15.0" fill="rgb(240,67,32)" rx="2" ry="2" />
<text  x="829.17" y="495.5" ></text>
</g>
<g >
<title>main (1 samples, 0.83%)</title><rect x="993.3" y="485" width="9.9" height="15.0" fill="rgb(250,75,52)" rx="2" ry="2" />
<text  x="996.33" y="495.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 4.17%)</title><rect x="875.3" y="501" width="49.2" height="15.0" fill="rgb(224,53,31)" rx="2" ry="2" />
<text  x="878.33" y="511.5" >[unk..</text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (4 samples, 3.33%)</title><rect x="836.0" y="341" width="39.3" height="15.0" fill="rgb(218,113,12)" rx="2" ry="2" />
<text  x="839.00" y="351.5" >int..</text>
</g>
<g >
<title>perf_evlist__prepare_workload (1 samples, 0.83%)</title><rect x="993.3" y="421" width="9.9" height="15.0" fill="rgb(228,169,24)" rx="2" ry="2" />
<text  x="996.33" y="431.5" ></text>
</g>
<g >
<title>main (5 samples, 4.17%)</title><rect x="944.2" y="469" width="49.1" height="15.0" fill="rgb(245,171,46)" rx="2" ry="2" />
<text  x="947.17" y="479.5" >main</text>
</g>
<g >
<title>[i965_dri.so] (1 samples, 0.83%)</title><rect x="10.0" y="485" width="9.8" height="15.0" fill="rgb(214,70,17)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>swapper (19 samples, 15.83%)</title><rect x="1003.2" y="517" width="186.8" height="15.0" fill="rgb(226,65,40)" rx="2" ry="2" />
<text  x="1006.17" y="527.5" >swapper</text>
</g>
<g >
<title>run_builtin (5 samples, 4.17%)</title><rect x="944.2" y="437" width="49.1" height="15.0" fill="rgb(211,192,39)" rx="2" ry="2" />
<text  x="947.17" y="447.5" >run_..</text>
</g>
<g >
<title>pixman_edge_init (1 samples, 0.83%)</title><rect x="29.7" y="501" width="9.8" height="15.0" fill="rgb(250,224,46)" rx="2" ry="2" />
<text  x="32.67" y="511.5" ></text>
</g>
<g >
<title>intel_idle (1 samples, 0.83%)</title><rect x="1180.2" y="325" width="9.8" height="15.0" fill="rgb(216,152,7)" rx="2" ry="2" />
<text  x="1183.17" y="335.5" ></text>
</g>
<g >
<title>native_write_msr (4 samples, 3.33%)</title><rect x="954.0" y="37" width="39.3" height="15.0" fill="rgb(253,108,46)" rx="2" ry="2" />
<text  x="957.00" y="47.5" >nat..</text>
</g>
<g >
<title>[unknown] (2 samples, 1.67%)</title><rect x="10.0" y="501" width="19.7" height="15.0" fill="rgb(229,142,37)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>__perf_event_enable (4 samples, 3.33%)</title><rect x="836.0" y="389" width="39.3" height="15.0" fill="rgb(241,175,15)" rx="2" ry="2" />
<text  x="839.00" y="399.5" >__p..</text>
</g>
<g >
<title>[libfreetype.so.6.15.0] (28 samples, 23.33%)</title><rect x="600.0" y="501" width="275.3" height="15.0" fill="rgb(221,187,20)" rx="2" ry="2" />
<text  x="603.00" y="511.5" >[libfreetype.so.6.15.0]</text>
</g>
<g >
<title>x86_64_start_reservations (1 samples, 0.83%)</title><rect x="1180.2" y="469" width="9.8" height="15.0" fill="rgb(249,98,48)" rx="2" ry="2" />
<text  x="1183.17" y="479.5" ></text>
</g>
<g >
<title>_perf_ioctl (5 samples, 4.17%)</title><rect x="944.2" y="245" width="49.1" height="15.0" fill="rgb(238,106,37)" rx="2" ry="2" />
<text  x="947.17" y="255.5" >_per..</text>
</g>
<g >
<title>x264_macroblock_cache_load_progressive (1 samples, 0.83%)</title><rect x="373.8" y="485" width="9.9" height="15.0" fill="rgb(213,182,42)" rx="2" ry="2" />
<text  x="376.83" y="495.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 4.17%)</title><rect x="944.2" y="501" width="49.1" height="15.0" fill="rgb(242,110,31)" rx="2" ry="2" />
<text  x="947.17" y="511.5" >[unk..</text>
</g>
<g >
<title>start_secondary (18 samples, 15.00%)</title><rect x="1003.2" y="485" width="177.0" height="15.0" fill="rgb(241,40,24)" rx="2" ry="2" />
<text  x="1006.17" y="495.5" >start_secondary</text>
</g>
<g >
<title>event_function (4 samples, 3.33%)</title><rect x="954.0" y="133" width="39.3" height="15.0" fill="rgb(246,18,51)" rx="2" ry="2" />
<text  x="957.00" y="143.5" >eve..</text>
</g>
<g >
<title>native_write_msr (4 samples, 3.33%)</title><rect x="836.0" y="309" width="39.3" height="15.0" fill="rgb(217,172,15)" rx="2" ry="2" />
<text  x="839.00" y="319.5" >nat..</text>
</g>
<g >
<title>call_cpuidle (1 samples, 0.83%)</title><rect x="1180.2" y="373" width="9.8" height="15.0" fill="rgb(237,88,48)" rx="2" ry="2" />
<text  x="1183.17" y="383.5" ></text>
</g>
</g>
</svg>
